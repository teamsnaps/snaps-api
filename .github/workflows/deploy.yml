name: Deploy to AWS ECS Blue/Green

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy to AWS ECS (Blue/Green)
    runs-on: ubuntu-latest
    environment: prod

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
      CODEDEPLOY_APPLICATION: ${{ secrets.CODEDEPLOY_APPLICATION }}
      CODEDEPLOY_DEPLOYMENT_GROUP: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract short sha
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64 --no-cache -f Dockerfile -t ${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} .
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}
          environment-variables: |
            CONTAINER_NAME=${{secrets.CONTAINER_NAME}}
            DOCKER_IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
            SNAPSAPI_SECRET_KEY=${{secrets.SNAPSAPI_SECRET_KEY}}
            BASE_BACKEND_URL=${{secrets.BASE_BACKEND_URL}}
            DB_HOST=${{secrets.DB_HOST}}
            DB_PORT=${{secrets.DB_PORT}}
            DB_NAME=${{secrets.DB_NAME}}
            DB_USER=${{secrets.DB_USER}}
            DB_PASSWORD=${{secrets.DB_PASSWORD}}
            AWS_S3_REGION_NAME=${{secrets.AWS_S3_REGION_NAME}}
            AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}
            AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}
            AWS_S3_CUSTOM_DOMAIN=${{secrets.AWS_S3_CUSTOM_DOMAIN}}
            AWS_STORAGE_BUCKET_NAME=${{secrets.AWS_STORAGE_BUCKET_NAME}}
            GOOGLE_CLIENT_ID=${{secrets.GOOGLE_CLIENT_ID}}
            GOOGLE_CLIENT_SECRET=${{secrets.GOOGLE_CLIENT_SECRET}}
            GOOGLE_REDIRECT_URL=${{secrets.GOOGLE_REDIRECT_URL}}

      - name: Deploy ECS service (Blue/Green)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true
          codedeploy-appspec: appspec.yaml
          codedeploy-application: ${{ env.CODEDEPLOY_APPLICATION }}
          codedeploy-deployment-group: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}
